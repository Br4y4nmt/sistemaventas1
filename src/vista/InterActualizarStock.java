package vista;

import conexion.Conexion;
import controlador.Ctrl_Producto;
import java.awt.Dimension;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import modelo.Producto;

/**
 *
 * @author Brayan
 */
public class InterActualizarStock extends javax.swing.JInternalFrame {
//variables 
    int idProducto = 0;
    int cantidad = 0;

    public InterActualizarStock() {
        initComponents();
        setTitle("Actualizar Stock de los Productos");
        setSize(new Dimension(400, 300));

        this.CargarComboProductos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txt_cantidada_actual = new javax.swing.JTextField();
        txt_cantidada_nueva = new javax.swing.JTextField();
        jComboBox_producto = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel_wallpepar = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Actualizar Stock de Productos");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 20, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Producto:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Stock Actual:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Stock Nuevo:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, -1, -1));

        txt_cantidada_actual.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txt_cantidada_actual.setEnabled(false);
        getContentPane().add(txt_cantidada_actual, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 90, 170, -1));

        txt_cantidada_nueva.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        getContentPane().add(txt_cantidada_nueva, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 130, 170, -1));

        jComboBox_producto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Producto:", "Item 2", "Item 3", "Item 4" }));
        jComboBox_producto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_productoActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox_producto, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 60, 170, -1));

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setText("Actualizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 170, 170, 30));

        jLabel_wallpepar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fondo3.jpg"))); // NOI18N
        getContentPane().add(jLabel_wallpepar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 390, 270));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox_productoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_productoActionPerformed
        this.MostrarStock();
    }//GEN-LAST:event_jComboBox_productoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        if(!jComboBox_producto.getSelectedItem().equals("seleccione producto: ")){
            
            if(!txt_cantidada_nueva.getText().isEmpty()){
                boolean validacion = validar(txt_cantidada_nueva.getText().trim());
                
                if(validacion == true ){
                //validamos la cantidad sea mayor a cero (0)
                if(Integer.parseInt(txt_cantidada_nueva.getText()) > 0){
                    
                    Producto producto = new Producto();
                    Ctrl_Producto controlProducto = new Ctrl_Producto();
                    int stockActual = Integer.parseInt(txt_cantidada_actual.getText().trim());
                    int stockNuevo = Integer.parseInt(txt_cantidada_nueva.getText().trim());
                    
                    
                    stockNuevo = stockActual + stockNuevo;
                    producto.setCantidad(stockNuevo);
                    
                    if(controlProducto.actualizarStock(producto, idProducto)){
                        JOptionPane.showMessageDialog(null, "Estock Actualizado");
                        jComboBox_producto.setSelectedItem("seleccione producto:");
                        txt_cantidada_actual.setText("");
                        txt_cantidada_nueva.setText("");
                        this.CargarComboProductos();
                        
                    }else{
                        JOptionPane.showMessageDialog(null, "Error al Actualizar");
                    }
                    
                    
                    
                    
                } else{
                    JOptionPane.showMessageDialog(null, "La cantidad no puede ser cero o negativo");
                }
            }else{
                JOptionPane.showMessageDialog(null, "En la cantidad no se admiten cantidadades no numericos ");
            }
            }else{
                JOptionPane.showMessageDialog(null, "Ingrese una nueva cantidad para sumar el stock del producto");
            }
            
        }else{
            JOptionPane.showMessageDialog(null, "Seleccione Producto");
            
        }
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox_producto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel_wallpepar;
    private javax.swing.JTextField txt_cantidada_actual;
    private javax.swing.JTextField txt_cantidada_nueva;
    // End of variables declaration//GEN-END:variables

// metodo para cargar los productos en el jCombobox
    private void CargarComboProductos() {

        Connection cn = Conexion.conectar();
        String sql = "select * from tb_producto";
        Statement st;

        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_producto.removeAllItems();
            jComboBox_producto.addItem("seleccione producto: ");
            while (rs.next()) {
                jComboBox_producto.addItem(rs.getString("nombre"));

            }

        } catch (SQLException e) {
            System.out.println("Error al cargar los productos en: " + e);

        }

    }

    //metodo para mostrar stock del producto selecionado 
    private void MostrarStock() {
        try {

            Connection cn = Conexion.conectar();
            String sql = "select  * from tb_producto where nombre = '" + this.jComboBox_producto.getSelectedItem() + "'";

            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            
            if (rs.next()) {
                idProducto = rs.getInt("idProducto");
                cantidad = rs.getInt("cantidad");
                txt_cantidada_actual.setText(String.valueOf(cantidad));
                

            } else {
                txt_cantidada_actual.setText("");

            }

        } catch (SQLException e) {
            System.out.println("Error al obtener Stock del producto: " + e);
        }

    }
    
    //metodo de validacion de caractere no numericos
    
    private boolean validar(String valor){
        int num;
        try {
            num = Integer.parseInt(valor);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }   
    }
}
